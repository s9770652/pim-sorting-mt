@article{Shell1959AHS,
	author={Donald Lewis Shell},
	title={A high-speed sorting procedure},
	journaltitle={Communications of the ACM},
	date={1959-07-01},
	editor={Alan J. Perlis},
	volume={2},
	issue={7},
	pages={30-32},
	doi={10.1145/368370.368387},
}

@misc{skean2023optimization,
	author={Oscar Skean and Richard Ehrenborg and Jerzy W. Jaromczyk},
	title={Optimization Perspectives on Shellsort},
	date={2023-01-01},
	eprint={2301.00316v1},
	archivePrefix={arXiv},
	primaryClass={cs.DS},
}

@InProceedings{10.1007/3-540-44669-9_12,
	author={Marcin Ciura},
	editor={Freivalds, R{\={u}}si{\c{n}}{\v{s}}},
	title={Best Increments for the Average Case of Shellsort},
	booktitle={Fundamentals of Computation Theory},
	date={2001-08-02},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={106-117},
	abstract={This paper presents the results of using sequential analysis to find increment sequences that minimize the average running time of Shellsort, for array sizes up to several thousand elements. The obtained sequences outperform by about 3{\%} the best ones known so far, and there is a plausible evidence that they are the optimal ones."},
	isbn={978-3-540-44669-9},
	doi={10.1007/3-540-44669-9_12},
%	url={https://web.archive.org/web/20180923235211/http://sun.aei.polsl.pl/~mciura/publikacje/shellsort.pdf},
%	urldate={2024-05-24},
}

@misc{lee2021empirically,
	author={Ying Wai Lee},
	title={Empirically Improved Tokuda Gap Sequence in Shellsort},
	date={2021-12-21},
	eprint={2112.11112v1},
	archivePrefix={arXiv},
	primaryClass={cs.DS},
}

@report{lukas_geis,
	author={Lukas Geis},
	title={Random Number Generation in the Pim-Architecture},
	type={Research Project Report},
	institution={Goethe University Frankfurt},
	date={2024},
	version={8c11f1f},
	pagetotal={13},
	url={https://github.com/lukasgeis/upmem-rng/blob/main/report/report.pdf},
	urldate={2024-05-19},
}

@misc{axtmann2020engineering,
	author={Michael Axtmann and Sascha Witt and Daniel Ferizovic and Peter Sanders},
	title={Engineering In-place (Shared-memory) Sorting Algorithms},
	date={2021-02-03},
	eprint={2009.13569v2},
	archivePrefix={arXiv},
	primaryClass={cs.DC},
}

@article{wegener1993heapsort,
	author={Ingo Wegener},
	title={BOTTOM-UP-HEAPSORT, a new variant of HEAPSORT beating, on an average, QUICKSORT (if \(n\) is not very small)},
	journal={Theoretical Computer Science},
	volume={118},
	issue={1},
	pages={81-98},
	date={1993-09-13},
	issn={0304-3975},
	doi={10.1016/0304-3975(93)90364-Y},
%	doi={https://doi.org/10.1016/0304-3975(93)90364-Y},
%	url={https://www.sciencedirect.com/science/article/pii/030439759390364Y},
	abstract={A variant of HEAPSORT, called BOTTOM-UP-HEAPSORT, is presented. It is based on a new reheap procedure. This sequential sorting algorithm is easy to implement and beats, on an average, QUICKSORT if n⩾400 and a clever version of QUICKSORT (where the split object is the median of 3 randomly chosen objects) if n⩾16000. The worst-case number of comparisons is bounded by 1.5n log n+O(n). Moreover, the new reheap procedure improves the delete procedure for the heap data structure for all n.},
}

@article{hoare1962quicksort,
	author={Charles Antony Richard Hoare},
	title={Quicksort},
	journal={The Computer Journal},
	volume={5},
	number={1},
	pages={10-16},
	year={1962},
	month={01},
	abstract="{A description is given of a new method of sorting in the random-access store of a computer. The method compares very favourably with other known methods in speed, in economy of storage, and in ease of programming. Certain refinements of the method, which may be useful in the optimization of inner loops, are described in the second part of the paper.}",
	issn={0010-4620},
	doi={10.1093/comjnl/5.1.10},
%	url={https://doi.org/10.1093/comjnl/5.1.10},
%	eprint={https://academic.oup.com/comjnl/article-pdf/5/1/10/1111445/050010.pdf},
}

@article{erkiö1984worstcase,
	author={Hannu Erkiö},
	title={The Worst Case Permutation for Median-of-Three Quicksort},
	journal={The Computer Journal},
	volume={27},
	number={3},
	pages={276-277},
	year={1984},
	month={01},
	abstract="{An algorithm is given which forms the worst case permutation for one of the most efficient versions of quicksort (median-of-three quicksort). This makes the experimental evaluation of this important algorithm possible. The paper includes a simple experimental comparison of the median-of-three and original versions of quicksort.}",
	issn={0010-4620},
	doi={10.1093/comjnl/27.3.276},
%	url={https://doi.org/10.1093/comjnl/27.3.276},
%	eprint={https://academic.oup.com/comjnl/article-pdf/27/3/276/1049274/270276.pdf},
}

@online{blum2011probabilistic,
	author={Avrim Blum and Manuel Blum},
	title={Lecture 3},
	subtitle={Probabilistic Analysis and Randomized Quicksort},
	date={2011-09-06},
	url={https://www.cs.cmu.edu/~avrim/451f11/lectures/lect0906.pdf},
	organization={Carnegie Mellon University},
	urldate={2024-07-26},
}

@article{blum1973median,
	author={Manuel Blum and Robert W. Floyd and Vaughan Pratt and Ronald L. Rivest and Robert E. Tarjan},
	title={Time bounds for selection},
	journal={Journal of Computer and System Sciences},
	volume={7},
	number={4},
	pages={448-461},
	date={1973-08},
	editor={Arnold Leonard Rosenberg},
	issn={0022-0000},
	doi={https://doi.org/10.1016/S0022-0000(73)80033-9},
%	url={https://www.sciencedirect.com/science/article/pii/S0022000073800339},
	abstract={The number of comparisons required to select the i-th smallest of n numbers is shown to be at most a linear function of n by analysis of a new selection algorithm—PICK. Specifically, no more than 5.4305 n comparisons are ever required. This bound is improved for extreme values of i, and a new lower bound on the requisite number of comparisons is also proved.},
}

@InProceedings{katajainen1997meticulous,
	author={Jyrki Katajainen and Jesper Larsson Tr{\"a}ff},
	editor={Giancarlo Bongiovanni and Daniel Pierre Bovet and Giuseppe Di Battista},
	title={A meticulous analysis of mergesort programs},
	booktitle={Algorithms and Complexity},
	date={1997-03-12},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={217-228},
	abstract={The efficiency of mergesort programs is analysed under a simple unit-cost model. In our analysis the time performance of the sorting programs includes the costs of key comparisons, element moves and address calculations. The goal is to establish the best possible time-bound relative to the model when sorting n integers. By the well-known information-theoretic argument n log2n−O(n) is a lower bound for the integer-sorting problem in our framework. New implementations for two-way and four-way bottom-up mergesort are given, the worst-case complexities of which are shown to be bounded by 5.5n log2n+O(n) and 3.25n log2n+O(n), respectively. The theoretical findings are backed up with a series of experiments which show the practical relevance of our analysis when implementing library routines for internal-memory computations.},
	isbn={978-3-540-68323-0},
	doi={10.1007/3-540-62592-5_74},
}

@manual{upmemSDK,
	title={UPMEM DPU SDK Documentation},
	date={2024},
	version={2024.1.0},
	organization={UPMEM},
	location={Grenoble},
	url={https://sdk.upmem.com/2024.1.0},
}

@book{maurer1974datenstrukturen,
	author={Hermann Maurer and Hans-Werner Six},
	title={Datenstrukturen und Programmierverfahren},
	date={1974},
	editor={Heinrich Görtler},
	language={German},
	series={Leitfäden der angewandten Mathematik und Mechanik},
	number={25},
	note={Teubner Studienbücher Informatik},
	publisher={B. G. Teubner},
	location={Stuttgart},
	isbn={3-519-02328-8},
	pagetotal={222},
}

@book{wirth1975algorithmen,
	author={Niklaus Wirth},
	title={Algorithmen und Datenstrukturen},
	date={1975},
	editor={Heinrich Görtler},
	language={German},
	series={Leitfäden der angewandten Mathematik und Mechanik},
	number={32},
	note={Teubner Studienbücher Informatik},
	publisher={B. G. Teubner},
	location={Stuttgart},
	isbn={3-519-02330-X},
	pagetotal={376},
}
